// Mocks generated by Mockito 5.2.0 from annotations
// in moviz/test/infrastructure/movie/movie_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:moviz/domain/movie/movie_object.dart' as _i2;
import 'package:moviz/infrastructure/movie/local_data_source/database_adapters.dart'
    as _i6;
import 'package:moviz/infrastructure/movie/local_data_source/i_local_data_source.dart'
    as _i4;
import 'package:moviz/infrastructure/movie/remote_data_source/i_remote_data_source.dart'
    as _i7;
import 'package:moviz/infrastructure/movie/remote_data_source/responses.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovie_0 extends _i1.Fake implements _i2.Movie {}

class _FakeMovieResponse_1 extends _i1.Fake implements _i3.MovieResponse {}

/// A class which mocks [ILocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalDataSource extends _i1.Mock implements _i4.ILocalDataSource {
  MockILocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Movie>> getFavoriteMovies() =>
      (super.noSuchMethod(Invocation.method(#getFavoriteMovies, []),
              returnValue: Future<List<_i2.Movie>>.value(<_i2.Movie>[]))
          as _i5.Future<List<_i2.Movie>>);
  @override
  _i5.Future<List<_i2.Movie>> getAllMovies() =>
      (super.noSuchMethod(Invocation.method(#getAllMovies, []),
              returnValue: Future<List<_i2.Movie>>.value(<_i2.Movie>[]))
          as _i5.Future<List<_i2.Movie>>);
  @override
  _i5.Future<List<_i2.Movie>> getHiddenMovies() =>
      (super.noSuchMethod(Invocation.method(#getHiddenMovies, []),
              returnValue: Future<List<_i2.Movie>>.value(<_i2.Movie>[]))
          as _i5.Future<List<_i2.Movie>>);
  @override
  _i5.Future<_i2.Movie> getSingleMovie(String? id) =>
      (super.noSuchMethod(Invocation.method(#getSingleMovie, [id]),
              returnValue: Future<_i2.Movie>.value(_FakeMovie_0()))
          as _i5.Future<_i2.Movie>);
  @override
  _i5.Future<void> addMovieToFavorite(_i6.MovieDocument? movieDocument) =>
      (super.noSuchMethod(
          Invocation.method(#addMovieToFavorite, [movieDocument]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> addMovieToHidden(_i6.MovieDocument? movieDocument) =>
      (super.noSuchMethod(Invocation.method(#addMovieToHidden, [movieDocument]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> removeMovieFromFavorite(_i6.MovieDocument? movieDocument) =>
      (super.noSuchMethod(
          Invocation.method(#removeMovieFromFavorite, [movieDocument]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [IRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRemoteDataSource extends _i1.Mock implements _i7.IRemoteDataSource {
  MockIRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.MovieResponse> searchMovie(String? expression) =>
      (super.noSuchMethod(Invocation.method(#searchMovie, [expression]),
              returnValue:
                  Future<_i3.MovieResponse>.value(_FakeMovieResponse_1()))
          as _i5.Future<_i3.MovieResponse>);
}
